// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package ERC721

import (
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// NRC7FullABI is the input ABI used to generate the binding from.
const NRC7FullABI = "[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PAUSER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"mintWithTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"newBaseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"tokensOfOwner\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"ownerTokens\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]"

// NRC7FullBin is the compiled bytecode used for deploying new contracts.
var NRC7FullBin = "0x60806040523480156200001157600080fd5b5060405162003207380380620032078339810160408190526200003491620003e5565b8251839083906200004d90600290602085019062000294565b5080516200006390600390602084019062000294565b5050600c805460ff191690555080516200008590600f90602084019062000294565b506200009c60006200009662000103565b62000107565b620000cb7f9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a66200009662000103565b620000fa7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a6200009662000103565b505050620004c5565b3390565b6200011e82826200014a60201b62000c911760201c565b60008281526001602090815260409091206200014591839062000c9b6200015a821b17901c565b505050565b6200015682826200017a565b5050565b600062000171836001600160a01b03841662000204565b90505b92915050565b62000186828262000253565b62000156576000828152602081815260408083206001600160a01b03851684529091529020805460ff19166001179055620001c062000103565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200021283836200027c565b6200024a5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000174565b50600062000174565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b60009081526001919091016020526040902054151590565b828054620002a29062000472565b90600052602060002090601f016020900481019282620002c6576000855562000311565b82601f10620002e157805160ff191683800117855562000311565b8280016001018555821562000311579182015b8281111562000311578251825591602001919060010190620002f4565b506200031f92915062000323565b5090565b5b808211156200031f576000815560010162000324565b600082601f8301126200034b578081fd5b81516001600160401b0380821115620003685762000368620004af565b6040516020601f8401601f1916820181018381118382101715620003905762000390620004af565b6040528382528584018101871015620003a7578485fd5b8492505b83831015620003ca5785830181015182840182015291820191620003ab565b83831115620003db57848185840101525b5095945050505050565b600080600060608486031215620003fa578283fd5b83516001600160401b038082111562000411578485fd5b6200041f878388016200033a565b9450602086015191508082111562000435578384fd5b62000443878388016200033a565b9350604086015191508082111562000459578283fd5b5062000468868287016200033a565b9150509250925092565b6002810460018216806200048757607f821691505b60208210811415620004a957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b612d3280620004d56000396000f3fe608060405234801561001057600080fd5b506004361061021c5760003560e01c80635c975abb11610125578063a217fddf116100ad578063ca15c8731161007c578063ca15c8731461046d578063d539139314610480578063d547741f14610488578063e63ab1e91461049b578063e985e9c5146104a35761021c565b8063a217fddf1461042c578063a22cb46514610434578063b88d4fde14610447578063c87b56dd1461045a5761021c565b80638456cb59116100f45780638456cb59146103d65780638462151c146103de5780639010d07c146103fe57806391d148541461041157806395d89b41146104245761021c565b80635c975abb146103955780636352211e1461039d5780636a627842146103b057806370a08231146103c35761021c565b80632f745c59116101a857806342966c681161017757806342966c681461033657806345c17782146103495780634f558e791461035c5780634f6ccce71461036f57806355f804b3146103825761021c565b80632f745c59146102f557806336568abe146103085780633f4ba83a1461031b57806342842e0e146103235761021c565b8063162094c4116101ef578063162094c41461029457806318160ddd146102a757806323b872dd146102bc578063248a9ca3146102cf5780632f2ff15d146102e25761021c565b806301ffc9a71461022157806306fdde031461024a578063081812fc1461025f578063095ea7b31461027f575b600080fd5b61023461022f366004612118565b6104b6565b60405161024191906122dc565b60405180910390f35b6102526104c9565b60405161024191906122f0565b61027261026d3660046120bd565b61055b565b6040516102419190612247565b61029261028d366004612094565b6105a7565b005b6102926102a23660046121bd565b61063f565b6102af610683565b60405161024191906122e7565b6102926102ca366004611f5a565b610689565b6102af6102dd3660046120bd565b6106c1565b6102926102f03660046120d5565b6106d6565b6102af610303366004612094565b6106f8565b6102926103163660046120d5565b61074d565b61029261076f565b610292610331366004611f5a565b6107c1565b6102926103443660046120bd565b6107dc565b610292610357366004612048565b61080f565b61023461036a3660046120bd565b610875565b6102af61037d3660046120bd565b610880565b610292610390366004612150565b6108db565b610234610910565b6102726103ab3660046120bd565b610919565b6102926103be366004611f0e565b61094e565b6102af6103d1366004611f0e565b61099c565b6102926109e0565b6103f16103ec366004611f0e565b610a30565b6040516102419190612298565b61027261040c3660046120f7565b610a98565b61023461041f3660046120d5565b610ab7565b610252610ae0565b6102af610aef565b61029261044236600461200e565b610af4565b610292610455366004611f95565b610bc2565b6102526104683660046120bd565b610c01565b6102af61047b3660046120bd565b610c0c565b6102af610c23565b6102926104963660046120d5565b610c35565b6102af610c3f565b6102346104b1366004611f28565b610c63565b60006104c182610cb0565b90505b919050565b6060600280546104d890612c1a565b80601f016020809104026020016040519081016040528092919081815260200182805461050490612c1a565b80156105515780601f1061052657610100808354040283529160200191610551565b820191906000526020600020905b81548152906001019060200180831161053457829003601f168201915b5050505050905090565b600061056682610cd5565b61058b5760405162461bcd60e51b8152600401610582906128bd565b60405180910390fd5b506000908152600660205260409020546001600160a01b031690565b60006105b282610919565b9050806001600160a01b0316836001600160a01b031614156105e65760405162461bcd60e51b8152600401610582906129a1565b806001600160a01b03166105f8610cf2565b6001600160a01b031614806106145750610614816104b1610cf2565b6106305760405162461bcd60e51b8152600401610582906126f9565b61063a8383610cf6565b505050565b610659600080516020612cdd83398151915261041f610cf2565b6106755760405162461bcd60e51b81526004016105829061240d565b61067f8282610d64565b5050565b600a5490565b61069a610694610cf2565b82610da8565b6106b65760405162461bcd60e51b8152600401610582906129e2565b61063a838383610e2d565b60009081526020819052604090206001015490565b6106e08282610f5a565b600082815260016020526040902061063a9082610c9b565b60006107038361099c565b82106107215760405162461bcd60e51b815260040161058290612453565b506001600160a01b03821660009081526008602090815260408083208484529091529020545b92915050565b6107578282610f8a565b600082815260016020526040902061063a9082610fcc565b61079b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61041f610cf2565b6107b75760405162461bcd60e51b8152600401610582906124f0565b6107bf610fe1565b565b61063a83838360405180602001604052806000815250610bc2565b6107e7610694610cf2565b6108035760405162461bcd60e51b815260040161058290612b0c565b61080c8161104f565b50565b610829600080516020612cdd83398151915261041f610cf2565b6108455760405162461bcd60e51b815260040161058290612571565b61085882610853600e611058565b61105c565b61086b610865600e611058565b82610d64565b61067f600e61113b565b60006104c182610cd5565b600061088a610683565b82106108a85760405162461bcd60e51b815260040161058290612a33565b600a82815481106108c957634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6108e8600061041f610cf2565b6109045760405162461bcd60e51b815260040161058290612ac7565b61063a600f8383611d23565b600c5460ff1690565b6000818152600460205260408120546001600160a01b0316806104c15760405162461bcd60e51b8152600401610582906127a0565b610968600080516020612cdd83398151915261041f610cf2565b6109845760405162461bcd60e51b815260040161058290612571565b61099281610853600e611058565b61080c600e61113b565b60006001600160a01b0382166109c45760405162461bcd60e51b815260040161058290612756565b506001600160a01b031660009081526005602052604090205490565b610a0c7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a61041f610cf2565b610a285760405162461bcd60e51b815260040161058290612a7f565b6107bf611144565b60606000610a3d8361099c565b905060005b81811015610a9157610a5484826106f8565b838281518110610a7457634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610a8981612c55565b915050610a42565b5050919050565b6000828152600160205260408120610ab0908361119f565b9392505050565b6000918252602082815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600380546104d890612c1a565b600081565b610afc610cf2565b6001600160a01b0316826001600160a01b03161415610b2d5760405162461bcd60e51b8152600401610582906125fc565b8060076000610b3a610cf2565b6001600160a01b03908116825260208083019390935260409182016000908120918716808252919093529120805460ff191692151592909217909155610b7e610cf2565b6001600160a01b03167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051610bb691906122dc565b60405180910390a35050565b610bd3610bcd610cf2565b83610da8565b610bef5760405162461bcd60e51b8152600401610582906129e2565b610bfb848484846111ab565b50505050565b60606104c1826111de565b60008181526001602052604081206104c1906112f7565b600080516020612cdd83398151915281565b6107578282611302565b7f65d7a28e3265b37a6474929f336521b332c1681b933f6cb9f3376673440d862a81565b6001600160a01b03918216600090815260076020908152604080832093909416825291909152205460ff1690565b61067f828261132a565b6000610ab0836001600160a01b0384166113af565b60006001600160e01b0319821663780e9d6360e01b14806104c157506104c1826113f9565b6000908152600460205260409020546001600160a01b0316151590565b3390565b600081815260066020526040902080546001600160a01b0319166001600160a01b0384169081179091558190610d2b82610919565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b610d6d82610cd5565b610d895760405162461bcd60e51b8152600401610582906127e9565b6000828152600d60209081526040909120825161063a92840190611da7565b6000610db382610cd5565b610dcf5760405162461bcd60e51b815260040161058290612633565b6000610dda83610919565b9050806001600160a01b0316846001600160a01b03161480610e155750836001600160a01b0316610e0a8461055b565b6001600160a01b0316145b80610e255750610e258185610c63565b949350505050565b826001600160a01b0316610e4082610919565b6001600160a01b031614610e665760405162461bcd60e51b815260040161058290612909565b6001600160a01b038216610e8c5760405162461bcd60e51b8152600401610582906125b8565b610e97838383611439565b610ea2600082610cf6565b6001600160a01b0383166000908152600560205260408120805460019290610ecb908490612bd7565b90915550506001600160a01b0382166000908152600560205260408120805460019290610ef9908490612bab565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b610f6e610f66836106c1565b61041f610cf2565b610c915760405162461bcd60e51b815260040161058290612390565b610f92610cf2565b6001600160a01b0316816001600160a01b031614610fc25760405162461bcd60e51b815260040161058290612b5c565b61067f8282611444565b6000610ab0836001600160a01b0384166114c7565b610fe9610910565b6110055760405162461bcd60e51b8152600401610582906123df565b600c805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa611038610cf2565b6040516110459190612247565b60405180910390a1565b61080c816115e4565b5490565b6001600160a01b0382166110825760405162461bcd60e51b815260040161058290612837565b61108b81610cd5565b156110a85760405162461bcd60e51b81526004016105829061253a565b6110b460008383611439565b6001600160a01b03821660009081526005602052604081208054600192906110dd908490612bab565b909155505060008181526004602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b80546001019055565b61114c610910565b156111695760405162461bcd60e51b8152600401610582906126cf565b600c805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611038610cf2565b6000610ab08383611624565b6111b6848484610e2d565b6111c28484848461167d565b610bfb5760405162461bcd60e51b81526004016105829061249e565b60606111e982610cd5565b6112055760405162461bcd60e51b81526004016105829061286c565b6000828152600d60205260408120805461121e90612c1a565b80601f016020809104026020016040519081016040528092919081815260200182805461124a90612c1a565b80156112975780601f1061126c57610100808354040283529160200191611297565b820191906000526020600020905b81548152906001019060200180831161127a57829003601f168201915b5050505050905060006112a8611798565b90508051600014156112bc575090506104c4565b8151156112ee5780826040516020016112d6929190612218565b604051602081830303815290604052925050506104c4565b610e25846117a7565b60006104c182611058565b61130e610f66836106c1565b610fc25760405162461bcd60e51b81526004016105829061267f565b6113348282610ab7565b61067f576000828152602081815260408083206001600160a01b03851684529091529020805460ff1916600117905561136b610cf2565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006113bb8383611829565b6113f157508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610747565b506000610747565b60006001600160e01b031982166380ac58cd60e01b148061142a57506001600160e01b03198216635b5e139f60e01b145b806104c157506104c182611841565b61063a838383611866565b61144e8282610ab7565b1561067f576000828152602081815260408083206001600160a01b03851684529091529020805460ff19169055611483610cf2565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b600081815260018301602052604081205480156115da5760006114eb600183612bd7565b85549091506000906114ff90600190612bd7565b9050600086600001828154811061152657634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061155757634e487b7160e01b600052603260045260246000fd5b60009182526020909120015561156e836001612bab565b6000828152600189016020526040902055865487908061159e57634e487b7160e01b600052603160045260246000fd5b60019003818190600052602060002001600090559055866001016000878152602001908152602001600020600090556001945050505050610747565b6000915050610747565b6115ed81611896565b6000818152600d60205260409020805461160690612c1a565b15905061080c576000818152600d6020526040812061080c91611e1b565b815460009082106116475760405162461bcd60e51b815260040161058290612303565b82600001828154811061166a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b6000611691846001600160a01b031661193d565b1561178d57836001600160a01b031663150b7a026116ad610cf2565b8786866040518563ffffffff1660e01b81526004016116cf949392919061225b565b602060405180830381600087803b1580156116e957600080fd5b505af1925050508015611719575060408051601f3d908101601f1916820190925261171691810190612134565b60015b611773573d808015611747576040519150601f19603f3d011682016040523d82523d6000602084013e61174c565b606091505b50805161176b5760405162461bcd60e51b81526004016105829061249e565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610e25565b506001949350505050565b6060600f80546104d890612c1a565b60606117b282610cd5565b6117ce5760405162461bcd60e51b815260040161058290612952565b60006117d8611798565b905060008151116117f85760405180602001604052806000815250610ab0565b8061180284611943565b604051602001611813929190612218565b6040516020818303038152906040529392505050565b60009081526001919091016020526040902054151590565b60006001600160e01b03198216635a05180f60e01b14806104c157506104c182611a5e565b611871838383611a83565b611879610910565b1561063a5760405162461bcd60e51b815260040161058290612345565b60006118a182610919565b90506118af81600084611439565b6118ba600083610cf6565b6001600160a01b03811660009081526005602052604081208054600192906118e3908490612bd7565b909155505060008281526004602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b3b151590565b60608161196857506040805180820190915260018152600360fc1b60208201526104c4565b8160005b8115611992578061197c81612c55565b915061198b9050600a83612bc3565b915061196c565b60008167ffffffffffffffff8111156119bb57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119e5576020820181803683370190505b5090505b8415610e25576119fa600183612bd7565b9150611a07600a86612c70565b611a12906030612bab565b60f81b818381518110611a3557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350611a57600a86612bc3565b94506119e9565b60006001600160e01b03198216637965db0b60e01b14806104c157506104c182611b0c565b611a8e83838361063a565b6001600160a01b038316611aaa57611aa581611b25565b611acd565b816001600160a01b0316836001600160a01b031614611acd57611acd8382611b69565b6001600160a01b038216611ae957611ae481611c06565b61063a565b826001600160a01b0316826001600160a01b03161461063a5761063a8282611cdf565b6001600160e01b031981166301ffc9a760e01b14919050565b600a80546000838152600b60205260408120829055600182018355919091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a80155565b60006001611b768461099c565b611b809190612bd7565b600083815260096020526040902054909150808214611bd3576001600160a01b03841660009081526008602090815260408083208584528252808320548484528184208190558352600990915290208190555b5060009182526009602090815260408084208490556001600160a01b039094168352600881528383209183525290812055565b600a54600090611c1890600190612bd7565b6000838152600b6020526040812054600a8054939450909284908110611c4e57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600a8381548110611c7d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600b9091526040808220849055858252812055600a805480611cc357634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000611cea8361099c565b6001600160a01b039093166000908152600860209081526040808320868452825280832085905593825260099052919091209190915550565b828054611d2f90612c1a565b90600052602060002090601f016020900481019282611d515760008555611d97565b82601f10611d6a5782800160ff19823516178555611d97565b82800160010185558215611d97579182015b82811115611d97578235825591602001919060010190611d7c565b50611da3929150611e53565b5090565b828054611db390612c1a565b90600052602060002090601f016020900481019282611dd55760008555611d97565b82601f10611dee57805160ff1916838001178555611d97565b82800160010185558215611d97579182015b82811115611d97578251825591602001919060010190611e00565b508054611e2790612c1a565b6000825580601f10611e39575061080c565b601f01602090049060005260206000209081019061080c91905b5b80821115611da35760008155600101611e54565b600067ffffffffffffffff80841115611e8357611e83612cb0565b604051601f8501601f191681016020018281118282101715611ea757611ea7612cb0565b604052848152915081838501861015611ebf57600080fd5b8484602083013760006020868301015250509392505050565b80356001600160a01b03811681146104c457600080fd5b600082601f830112611eff578081fd5b610ab083833560208501611e68565b600060208284031215611f1f578081fd5b610ab082611ed8565b60008060408385031215611f3a578081fd5b611f4383611ed8565b9150611f5160208401611ed8565b90509250929050565b600080600060608486031215611f6e578081fd5b611f7784611ed8565b9250611f8560208501611ed8565b9150604084013590509250925092565b60008060008060808587031215611faa578081fd5b611fb385611ed8565b9350611fc160208601611ed8565b925060408501359150606085013567ffffffffffffffff811115611fe3578182fd5b8501601f81018713611ff3578182fd5b61200287823560208401611e68565b91505092959194509250565b60008060408385031215612020578182fd5b61202983611ed8565b91506020830135801515811461203d578182fd5b809150509250929050565b6000806040838503121561205a578182fd5b61206383611ed8565b9150602083013567ffffffffffffffff81111561207e578182fd5b61208a85828601611eef565b9150509250929050565b600080604083850312156120a6578182fd5b6120af83611ed8565b946020939093013593505050565b6000602082840312156120ce578081fd5b5035919050565b600080604083850312156120e7578182fd5b82359150611f5160208401611ed8565b60008060408385031215612109578182fd5b50508035926020909101359150565b600060208284031215612129578081fd5b8135610ab081612cc6565b600060208284031215612145578081fd5b8151610ab081612cc6565b60008060208385031215612162578081fd5b823567ffffffffffffffff80821115612179578283fd5b818501915085601f83011261218c578283fd5b81358181111561219a578384fd5b8660208285010111156121ab578384fd5b60209290920196919550909350505050565b600080604083850312156121cf578182fd5b82359150602083013567ffffffffffffffff81111561207e578182fd5b60008151808452612204816020860160208601612bee565b601f01601f19169290920160200192915050565b6000835161222a818460208801612bee565b83519083019061223e818360208801612bee565b01949350505050565b6001600160a01b0391909116815260200190565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061228e908301846121ec565b9695505050505050565b6020808252825182820181905260009190848201906040850190845b818110156122d0578351835292840192918401916001016122b4565b50909695505050505050565b901515815260200190565b90815260200190565b600060208252610ab060208301846121ec565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602b908201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760408201526a1a1a5b19481c185d5cd95960aa1b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b60208082526026908201527f4e52433746756c6c3a206d7573742068617665206d696e74657220726f6c65206040820152651d1bc81cd95d60d21b606082015260800190565b6020808252602b908201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560408201526a74206f6620626f756e647360a81b606082015260800190565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602a908201527f4e52433746756c6c3a206d75737420686176652070617573657220726f6c6520604082015269746f20756e706175736560b01b606082015260800190565b6020808252601c908201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604082015260600190565b60208082526027908201527f4e52433746756c6c3a206d7573742068617665206d696e74657220726f6c65206040820152661d1bc81b5a5b9d60ca1b606082015260800190565b60208082526024908201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646040820152637265737360e01b606082015260800190565b60208082526019908201527f4552433732313a20617070726f766520746f2063616c6c657200000000000000604082015260600190565b6020808252602c908201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526038908201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760408201527f6e6572206e6f7220617070726f76656420666f7220616c6c0000000000000000606082015260800190565b6020808252602a908201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604082015269726f206164647265737360b01b606082015260800190565b60208082526029908201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460408201526832b73a103a37b5b2b760b91b606082015260800190565b6020808252602e908201527f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60408201526d32bc34b9ba32b73a103a37b5b2b760911b606082015260800190565b6020808252818101527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604082015260600190565b60208082526031908201527f45524337323155524953746f726167653a2055524920717565727920666f72206040820152703737b732bc34b9ba32b73a103a37b5b2b760791b606082015260800190565b6020808252602c908201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860408201526b34b9ba32b73a103a37b5b2b760a11b606082015260800190565b60208082526029908201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960408201526839903737ba1037bbb760b91b606082015260800190565b6020808252602f908201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60408201526e3732bc34b9ba32b73a103a37b5b2b760891b606082015260800190565b60208082526021908201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656040820152603960f91b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252602c908201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60408201526b7574206f6620626f756e647360a01b606082015260800190565b60208082526028908201527f4e52433746756c6c3a206d75737420686176652070617573657220726f6c6520604082015267746f20706175736560c01b606082015260800190565b60208082526025908201527f4e52433746756c6c3a206d75737420686176652061646d696e20726f6c6520746040820152641bc81cd95d60da1b606082015260800190565b60208082526030908201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760408201526f1b995c881b9bdc88185c1c1c9bdd995960821b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b60008219821115612bbe57612bbe612c84565b500190565b600082612bd257612bd2612c9a565b500490565b600082821015612be957612be9612c84565b500390565b60005b83811015612c09578181015183820152602001612bf1565b83811115610bfb5750506000910152565b600281046001821680612c2e57607f821691505b60208210811415612c4f57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415612c6957612c69612c84565b5060010190565b600082612c7f57612c7f612c9a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461080c57600080fdfe9f2df0fed2c77648de5860a4cc508cd0818c85b8b8a1ab4ceeef8d981c8956a6a2646970667358221220411356e8b73cb615717efd640e3952e04cde4d959f1e894dc428ce90d1bc9fac64736f6c63430008000033"

// DeployNRC7Full deploys a new Ethereum contract, binding an instance of NRC7Full to it.
func DeployNRC7Full(auth *bind.TransactOpts, backend bind.ContractBackend, name string, symbol string, baseTokenURI string) (common.Address, *types.Transaction, *NRC7Full, error) {
	parsed, err := abi.JSON(strings.NewReader(NRC7FullABI))
	if err != nil {
		return common.Address{}, nil, nil, err
	}

	address, tx, contract, err := bind.DeployContract(auth, parsed, common.FromHex(NRC7FullBin), backend, name, symbol, baseTokenURI)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &NRC7Full{NRC7FullCaller: NRC7FullCaller{contract: contract}, NRC7FullTransactor: NRC7FullTransactor{contract: contract}, NRC7FullFilterer: NRC7FullFilterer{contract: contract}}, nil
}

// NRC7Full is an auto generated Go binding around an Ethereum contract.
type NRC7Full struct {
	NRC7FullCaller     // Read-only binding to the contract
	NRC7FullTransactor // Write-only binding to the contract
	NRC7FullFilterer   // Log filterer for contract events
}

// NRC7FullCaller is an auto generated read-only Go binding around an Ethereum contract.
type NRC7FullCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NRC7FullTransactor is an auto generated write-only Go binding around an Ethereum contract.
type NRC7FullTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NRC7FullFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type NRC7FullFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// NRC7FullSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type NRC7FullSession struct {
	Contract     *NRC7Full         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// NRC7FullCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type NRC7FullCallerSession struct {
	Contract *NRC7FullCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// NRC7FullTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type NRC7FullTransactorSession struct {
	Contract     *NRC7FullTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// NRC7FullRaw is an auto generated low-level Go binding around an Ethereum contract.
type NRC7FullRaw struct {
	Contract *NRC7Full // Generic contract binding to access the raw methods on
}

// NRC7FullCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type NRC7FullCallerRaw struct {
	Contract *NRC7FullCaller // Generic read-only contract binding to access the raw methods on
}

// NRC7FullTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type NRC7FullTransactorRaw struct {
	Contract *NRC7FullTransactor // Generic write-only contract binding to access the raw methods on
}

// NewNRC7Full creates a new instance of NRC7Full, bound to a specific deployed contract.
func NewNRC7Full(address common.Address, backend bind.ContractBackend) (*NRC7Full, error) {
	contract, err := bindNRC7Full(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &NRC7Full{NRC7FullCaller: NRC7FullCaller{contract: contract}, NRC7FullTransactor: NRC7FullTransactor{contract: contract}, NRC7FullFilterer: NRC7FullFilterer{contract: contract}}, nil
}

// NewNRC7FullCaller creates a new read-only instance of NRC7Full, bound to a specific deployed contract.
func NewNRC7FullCaller(address common.Address, caller bind.ContractCaller) (*NRC7FullCaller, error) {
	contract, err := bindNRC7Full(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &NRC7FullCaller{contract: contract}, nil
}

// NewNRC7FullTransactor creates a new write-only instance of NRC7Full, bound to a specific deployed contract.
func NewNRC7FullTransactor(address common.Address, transactor bind.ContractTransactor) (*NRC7FullTransactor, error) {
	contract, err := bindNRC7Full(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &NRC7FullTransactor{contract: contract}, nil
}

// NewNRC7FullFilterer creates a new log filterer instance of NRC7Full, bound to a specific deployed contract.
func NewNRC7FullFilterer(address common.Address, filterer bind.ContractFilterer) (*NRC7FullFilterer, error) {
	contract, err := bindNRC7Full(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &NRC7FullFilterer{contract: contract}, nil
}

// bindNRC7Full binds a generic wrapper to an already deployed contract.
func bindNRC7Full(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(NRC7FullABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NRC7Full *NRC7FullRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NRC7Full.Contract.NRC7FullCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NRC7Full *NRC7FullRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NRC7Full.Contract.NRC7FullTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NRC7Full *NRC7FullRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NRC7Full.Contract.NRC7FullTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_NRC7Full *NRC7FullCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _NRC7Full.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_NRC7Full *NRC7FullTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NRC7Full.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_NRC7Full *NRC7FullTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _NRC7Full.Contract.contract.Transact(opts, method, params...)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCaller) DEFAULTADMINROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "DEFAULT_ADMIN_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _NRC7Full.Contract.DEFAULTADMINROLE(&_NRC7Full.CallOpts)
}

// DEFAULTADMINROLE is a free data retrieval call binding the contract method 0xa217fddf.
//
// Solidity: function DEFAULT_ADMIN_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCallerSession) DEFAULTADMINROLE() ([32]byte, error) {
	return _NRC7Full.Contract.DEFAULTADMINROLE(&_NRC7Full.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCaller) MINTERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "MINTER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullSession) MINTERROLE() ([32]byte, error) {
	return _NRC7Full.Contract.MINTERROLE(&_NRC7Full.CallOpts)
}

// MINTERROLE is a free data retrieval call binding the contract method 0xd5391393.
//
// Solidity: function MINTER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCallerSession) MINTERROLE() ([32]byte, error) {
	return _NRC7Full.Contract.MINTERROLE(&_NRC7Full.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCaller) PAUSERROLE(opts *bind.CallOpts) ([32]byte, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "PAUSER_ROLE")

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullSession) PAUSERROLE() ([32]byte, error) {
	return _NRC7Full.Contract.PAUSERROLE(&_NRC7Full.CallOpts)
}

// PAUSERROLE is a free data retrieval call binding the contract method 0xe63ab1e9.
//
// Solidity: function PAUSER_ROLE() view returns(bytes32)
func (_NRC7Full *NRC7FullCallerSession) PAUSERROLE() ([32]byte, error) {
	return _NRC7Full.Contract.PAUSERROLE(&_NRC7Full.CallOpts)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NRC7Full *NRC7FullCaller) BalanceOf(opts *bind.CallOpts, owner common.Address) (*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "balanceOf", owner)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NRC7Full *NRC7FullSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NRC7Full.Contract.BalanceOf(&_NRC7Full.CallOpts, owner)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address owner) view returns(uint256)
func (_NRC7Full *NRC7FullCallerSession) BalanceOf(owner common.Address) (*big.Int, error) {
	return _NRC7Full.Contract.BalanceOf(&_NRC7Full.CallOpts, owner)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 tokenId) view returns(bool)
func (_NRC7Full *NRC7FullCaller) Exists(opts *bind.CallOpts, tokenId *big.Int) (bool, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "exists", tokenId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 tokenId) view returns(bool)
func (_NRC7Full *NRC7FullSession) Exists(tokenId *big.Int) (bool, error) {
	return _NRC7Full.Contract.Exists(&_NRC7Full.CallOpts, tokenId)
}

// Exists is a free data retrieval call binding the contract method 0x4f558e79.
//
// Solidity: function exists(uint256 tokenId) view returns(bool)
func (_NRC7Full *NRC7FullCallerSession) Exists(tokenId *big.Int) (bool, error) {
	return _NRC7Full.Contract.Exists(&_NRC7Full.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullCaller) GetApproved(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "getApproved", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.GetApproved(&_NRC7Full.CallOpts, tokenId)
}

// GetApproved is a free data retrieval call binding the contract method 0x081812fc.
//
// Solidity: function getApproved(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullCallerSession) GetApproved(tokenId *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.GetApproved(&_NRC7Full.CallOpts, tokenId)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NRC7Full *NRC7FullCaller) GetRoleAdmin(opts *bind.CallOpts, role [32]byte) ([32]byte, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "getRoleAdmin", role)

	if err != nil {
		return *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([32]byte)).(*[32]byte)

	return out0, err

}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NRC7Full *NRC7FullSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _NRC7Full.Contract.GetRoleAdmin(&_NRC7Full.CallOpts, role)
}

// GetRoleAdmin is a free data retrieval call binding the contract method 0x248a9ca3.
//
// Solidity: function getRoleAdmin(bytes32 role) view returns(bytes32)
func (_NRC7Full *NRC7FullCallerSession) GetRoleAdmin(role [32]byte) ([32]byte, error) {
	return _NRC7Full.Contract.GetRoleAdmin(&_NRC7Full.CallOpts, role)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NRC7Full *NRC7FullCaller) GetRoleMember(opts *bind.CallOpts, role [32]byte, index *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "getRoleMember", role, index)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NRC7Full *NRC7FullSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.GetRoleMember(&_NRC7Full.CallOpts, role, index)
}

// GetRoleMember is a free data retrieval call binding the contract method 0x9010d07c.
//
// Solidity: function getRoleMember(bytes32 role, uint256 index) view returns(address)
func (_NRC7Full *NRC7FullCallerSession) GetRoleMember(role [32]byte, index *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.GetRoleMember(&_NRC7Full.CallOpts, role, index)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NRC7Full *NRC7FullCaller) GetRoleMemberCount(opts *bind.CallOpts, role [32]byte) (*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "getRoleMemberCount", role)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NRC7Full *NRC7FullSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _NRC7Full.Contract.GetRoleMemberCount(&_NRC7Full.CallOpts, role)
}

// GetRoleMemberCount is a free data retrieval call binding the contract method 0xca15c873.
//
// Solidity: function getRoleMemberCount(bytes32 role) view returns(uint256)
func (_NRC7Full *NRC7FullCallerSession) GetRoleMemberCount(role [32]byte) (*big.Int, error) {
	return _NRC7Full.Contract.GetRoleMemberCount(&_NRC7Full.CallOpts, role)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NRC7Full *NRC7FullCaller) HasRole(opts *bind.CallOpts, role [32]byte, account common.Address) (bool, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "hasRole", role, account)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NRC7Full *NRC7FullSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _NRC7Full.Contract.HasRole(&_NRC7Full.CallOpts, role, account)
}

// HasRole is a free data retrieval call binding the contract method 0x91d14854.
//
// Solidity: function hasRole(bytes32 role, address account) view returns(bool)
func (_NRC7Full *NRC7FullCallerSession) HasRole(role [32]byte, account common.Address) (bool, error) {
	return _NRC7Full.Contract.HasRole(&_NRC7Full.CallOpts, role, account)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NRC7Full *NRC7FullCaller) IsApprovedForAll(opts *bind.CallOpts, owner common.Address, operator common.Address) (bool, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "isApprovedForAll", owner, operator)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NRC7Full *NRC7FullSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NRC7Full.Contract.IsApprovedForAll(&_NRC7Full.CallOpts, owner, operator)
}

// IsApprovedForAll is a free data retrieval call binding the contract method 0xe985e9c5.
//
// Solidity: function isApprovedForAll(address owner, address operator) view returns(bool)
func (_NRC7Full *NRC7FullCallerSession) IsApprovedForAll(owner common.Address, operator common.Address) (bool, error) {
	return _NRC7Full.Contract.IsApprovedForAll(&_NRC7Full.CallOpts, owner, operator)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NRC7Full *NRC7FullCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NRC7Full *NRC7FullSession) Name() (string, error) {
	return _NRC7Full.Contract.Name(&_NRC7Full.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_NRC7Full *NRC7FullCallerSession) Name() (string, error) {
	return _NRC7Full.Contract.Name(&_NRC7Full.CallOpts)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullCaller) OwnerOf(opts *bind.CallOpts, tokenId *big.Int) (common.Address, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "ownerOf", tokenId)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.OwnerOf(&_NRC7Full.CallOpts, tokenId)
}

// OwnerOf is a free data retrieval call binding the contract method 0x6352211e.
//
// Solidity: function ownerOf(uint256 tokenId) view returns(address)
func (_NRC7Full *NRC7FullCallerSession) OwnerOf(tokenId *big.Int) (common.Address, error) {
	return _NRC7Full.Contract.OwnerOf(&_NRC7Full.CallOpts, tokenId)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NRC7Full *NRC7FullCaller) Paused(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "paused")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NRC7Full *NRC7FullSession) Paused() (bool, error) {
	return _NRC7Full.Contract.Paused(&_NRC7Full.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(bool)
func (_NRC7Full *NRC7FullCallerSession) Paused() (bool, error) {
	return _NRC7Full.Contract.Paused(&_NRC7Full.CallOpts)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NRC7Full *NRC7FullCaller) SupportsInterface(opts *bind.CallOpts, interfaceId [4]byte) (bool, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "supportsInterface", interfaceId)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NRC7Full *NRC7FullSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NRC7Full.Contract.SupportsInterface(&_NRC7Full.CallOpts, interfaceId)
}

// SupportsInterface is a free data retrieval call binding the contract method 0x01ffc9a7.
//
// Solidity: function supportsInterface(bytes4 interfaceId) view returns(bool)
func (_NRC7Full *NRC7FullCallerSession) SupportsInterface(interfaceId [4]byte) (bool, error) {
	return _NRC7Full.Contract.SupportsInterface(&_NRC7Full.CallOpts, interfaceId)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NRC7Full *NRC7FullCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NRC7Full *NRC7FullSession) Symbol() (string, error) {
	return _NRC7Full.Contract.Symbol(&_NRC7Full.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_NRC7Full *NRC7FullCallerSession) Symbol() (string, error) {
	return _NRC7Full.Contract.Symbol(&_NRC7Full.CallOpts)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullCaller) TokenByIndex(opts *bind.CallOpts, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "tokenByIndex", index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NRC7Full.Contract.TokenByIndex(&_NRC7Full.CallOpts, index)
}

// TokenByIndex is a free data retrieval call binding the contract method 0x4f6ccce7.
//
// Solidity: function tokenByIndex(uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullCallerSession) TokenByIndex(index *big.Int) (*big.Int, error) {
	return _NRC7Full.Contract.TokenByIndex(&_NRC7Full.CallOpts, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullCaller) TokenOfOwnerByIndex(opts *bind.CallOpts, owner common.Address, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "tokenOfOwnerByIndex", owner, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NRC7Full.Contract.TokenOfOwnerByIndex(&_NRC7Full.CallOpts, owner, index)
}

// TokenOfOwnerByIndex is a free data retrieval call binding the contract method 0x2f745c59.
//
// Solidity: function tokenOfOwnerByIndex(address owner, uint256 index) view returns(uint256)
func (_NRC7Full *NRC7FullCallerSession) TokenOfOwnerByIndex(owner common.Address, index *big.Int) (*big.Int, error) {
	return _NRC7Full.Contract.TokenOfOwnerByIndex(&_NRC7Full.CallOpts, owner, index)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NRC7Full *NRC7FullCaller) TokenURI(opts *bind.CallOpts, tokenId *big.Int) (string, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "tokenURI", tokenId)

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NRC7Full *NRC7FullSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NRC7Full.Contract.TokenURI(&_NRC7Full.CallOpts, tokenId)
}

// TokenURI is a free data retrieval call binding the contract method 0xc87b56dd.
//
// Solidity: function tokenURI(uint256 tokenId) view returns(string)
func (_NRC7Full *NRC7FullCallerSession) TokenURI(tokenId *big.Int) (string, error) {
	return _NRC7Full.Contract.TokenURI(&_NRC7Full.CallOpts, tokenId)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[] ownerTokens)
func (_NRC7Full *NRC7FullCaller) TokensOfOwner(opts *bind.CallOpts, owner common.Address) ([]*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "tokensOfOwner", owner)

	if err != nil {
		return *new([]*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new([]*big.Int)).(*[]*big.Int)

	return out0, err

}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[] ownerTokens)
func (_NRC7Full *NRC7FullSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _NRC7Full.Contract.TokensOfOwner(&_NRC7Full.CallOpts, owner)
}

// TokensOfOwner is a free data retrieval call binding the contract method 0x8462151c.
//
// Solidity: function tokensOfOwner(address owner) view returns(uint256[] ownerTokens)
func (_NRC7Full *NRC7FullCallerSession) TokensOfOwner(owner common.Address) ([]*big.Int, error) {
	return _NRC7Full.Contract.TokensOfOwner(&_NRC7Full.CallOpts, owner)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NRC7Full *NRC7FullCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _NRC7Full.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NRC7Full *NRC7FullSession) TotalSupply() (*big.Int, error) {
	return _NRC7Full.Contract.TotalSupply(&_NRC7Full.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_NRC7Full *NRC7FullCallerSession) TotalSupply() (*big.Int, error) {
	return _NRC7Full.Contract.TotalSupply(&_NRC7Full.CallOpts)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactor) Approve(opts *bind.TransactOpts, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "approve", to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.Approve(&_NRC7Full.TransactOpts, to, tokenId)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactorSession) Approve(to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.Approve(&_NRC7Full.TransactOpts, to, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactor) Burn(opts *bind.TransactOpts, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "burn", tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_NRC7Full *NRC7FullSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.Burn(&_NRC7Full.TransactOpts, tokenId)
}

// Burn is a paid mutator transaction binding the contract method 0x42966c68.
//
// Solidity: function burn(uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactorSession) Burn(tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.Burn(&_NRC7Full.TransactOpts, tokenId)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactor) GrantRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "grantRole", role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.GrantRole(&_NRC7Full.TransactOpts, role, account)
}

// GrantRole is a paid mutator transaction binding the contract method 0x2f2ff15d.
//
// Solidity: function grantRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactorSession) GrantRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.GrantRole(&_NRC7Full.TransactOpts, role, account)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_NRC7Full *NRC7FullTransactor) Mint(opts *bind.TransactOpts, to common.Address) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "mint", to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_NRC7Full *NRC7FullSession) Mint(to common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.Mint(&_NRC7Full.TransactOpts, to)
}

// Mint is a paid mutator transaction binding the contract method 0x6a627842.
//
// Solidity: function mint(address to) returns()
func (_NRC7Full *NRC7FullTransactorSession) Mint(to common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.Mint(&_NRC7Full.TransactOpts, to)
}

// MintWithTokenURI is a paid mutator transaction binding the contract method 0x45c17782.
//
// Solidity: function mintWithTokenURI(address to, string _tokenURI) returns()
func (_NRC7Full *NRC7FullTransactor) MintWithTokenURI(opts *bind.TransactOpts, to common.Address, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "mintWithTokenURI", to, _tokenURI)
}

// MintWithTokenURI is a paid mutator transaction binding the contract method 0x45c17782.
//
// Solidity: function mintWithTokenURI(address to, string _tokenURI) returns()
func (_NRC7Full *NRC7FullSession) MintWithTokenURI(to common.Address, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.MintWithTokenURI(&_NRC7Full.TransactOpts, to, _tokenURI)
}

// MintWithTokenURI is a paid mutator transaction binding the contract method 0x45c17782.
//
// Solidity: function mintWithTokenURI(address to, string _tokenURI) returns()
func (_NRC7Full *NRC7FullTransactorSession) MintWithTokenURI(to common.Address, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.MintWithTokenURI(&_NRC7Full.TransactOpts, to, _tokenURI)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NRC7Full *NRC7FullTransactor) Pause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "pause")
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NRC7Full *NRC7FullSession) Pause() (*types.Transaction, error) {
	return _NRC7Full.Contract.Pause(&_NRC7Full.TransactOpts)
}

// Pause is a paid mutator transaction binding the contract method 0x8456cb59.
//
// Solidity: function pause() returns()
func (_NRC7Full *NRC7FullTransactorSession) Pause() (*types.Transaction, error) {
	return _NRC7Full.Contract.Pause(&_NRC7Full.TransactOpts)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactor) RenounceRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "renounceRole", role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.RenounceRole(&_NRC7Full.TransactOpts, role, account)
}

// RenounceRole is a paid mutator transaction binding the contract method 0x36568abe.
//
// Solidity: function renounceRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactorSession) RenounceRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.RenounceRole(&_NRC7Full.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactor) RevokeRole(opts *bind.TransactOpts, role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "revokeRole", role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.RevokeRole(&_NRC7Full.TransactOpts, role, account)
}

// RevokeRole is a paid mutator transaction binding the contract method 0xd547741f.
//
// Solidity: function revokeRole(bytes32 role, address account) returns()
func (_NRC7Full *NRC7FullTransactorSession) RevokeRole(role [32]byte, account common.Address) (*types.Transaction, error) {
	return _NRC7Full.Contract.RevokeRole(&_NRC7Full.TransactOpts, role, account)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactor) SafeTransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "safeTransferFrom", from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.SafeTransferFrom(&_NRC7Full.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom is a paid mutator transaction binding the contract method 0x42842e0e.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactorSession) SafeTransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.SafeTransferFrom(&_NRC7Full.TransactOpts, from, to, tokenId)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NRC7Full *NRC7FullTransactor) SafeTransferFrom0(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "safeTransferFrom0", from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NRC7Full *NRC7FullSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NRC7Full.Contract.SafeTransferFrom0(&_NRC7Full.TransactOpts, from, to, tokenId, _data)
}

// SafeTransferFrom0 is a paid mutator transaction binding the contract method 0xb88d4fde.
//
// Solidity: function safeTransferFrom(address from, address to, uint256 tokenId, bytes _data) returns()
func (_NRC7Full *NRC7FullTransactorSession) SafeTransferFrom0(from common.Address, to common.Address, tokenId *big.Int, _data []byte) (*types.Transaction, error) {
	return _NRC7Full.Contract.SafeTransferFrom0(&_NRC7Full.TransactOpts, from, to, tokenId, _data)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NRC7Full *NRC7FullTransactor) SetApprovalForAll(opts *bind.TransactOpts, operator common.Address, approved bool) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "setApprovalForAll", operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NRC7Full *NRC7FullSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetApprovalForAll(&_NRC7Full.TransactOpts, operator, approved)
}

// SetApprovalForAll is a paid mutator transaction binding the contract method 0xa22cb465.
//
// Solidity: function setApprovalForAll(address operator, bool approved) returns()
func (_NRC7Full *NRC7FullTransactorSession) SetApprovalForAll(operator common.Address, approved bool) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetApprovalForAll(&_NRC7Full.TransactOpts, operator, approved)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string newBaseTokenURI) returns()
func (_NRC7Full *NRC7FullTransactor) SetBaseURI(opts *bind.TransactOpts, newBaseTokenURI string) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "setBaseURI", newBaseTokenURI)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string newBaseTokenURI) returns()
func (_NRC7Full *NRC7FullSession) SetBaseURI(newBaseTokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetBaseURI(&_NRC7Full.TransactOpts, newBaseTokenURI)
}

// SetBaseURI is a paid mutator transaction binding the contract method 0x55f804b3.
//
// Solidity: function setBaseURI(string newBaseTokenURI) returns()
func (_NRC7Full *NRC7FullTransactorSession) SetBaseURI(newBaseTokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetBaseURI(&_NRC7Full.TransactOpts, newBaseTokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_NRC7Full *NRC7FullTransactor) SetTokenURI(opts *bind.TransactOpts, tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "setTokenURI", tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_NRC7Full *NRC7FullSession) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetTokenURI(&_NRC7Full.TransactOpts, tokenId, _tokenURI)
}

// SetTokenURI is a paid mutator transaction binding the contract method 0x162094c4.
//
// Solidity: function setTokenURI(uint256 tokenId, string _tokenURI) returns()
func (_NRC7Full *NRC7FullTransactorSession) SetTokenURI(tokenId *big.Int, _tokenURI string) (*types.Transaction, error) {
	return _NRC7Full.Contract.SetTokenURI(&_NRC7Full.TransactOpts, tokenId, _tokenURI)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactor) TransferFrom(opts *bind.TransactOpts, from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "transferFrom", from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.TransferFrom(&_NRC7Full.TransactOpts, from, to, tokenId)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address from, address to, uint256 tokenId) returns()
func (_NRC7Full *NRC7FullTransactorSession) TransferFrom(from common.Address, to common.Address, tokenId *big.Int) (*types.Transaction, error) {
	return _NRC7Full.Contract.TransferFrom(&_NRC7Full.TransactOpts, from, to, tokenId)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NRC7Full *NRC7FullTransactor) Unpause(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _NRC7Full.contract.Transact(opts, "unpause")
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NRC7Full *NRC7FullSession) Unpause() (*types.Transaction, error) {
	return _NRC7Full.Contract.Unpause(&_NRC7Full.TransactOpts)
}

// Unpause is a paid mutator transaction binding the contract method 0x3f4ba83a.
//
// Solidity: function unpause() returns()
func (_NRC7Full *NRC7FullTransactorSession) Unpause() (*types.Transaction, error) {
	return _NRC7Full.Contract.Unpause(&_NRC7Full.TransactOpts)
}

// NRC7FullApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the NRC7Full contract.
type NRC7FullApprovalIterator struct {
	Event *NRC7FullApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullApproval represents a Approval event raised by the NRC7Full contract.
type NRC7FullApproval struct {
	Owner    common.Address
	Approved common.Address
	TokenId  *big.Int
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, approved []common.Address, tokenId []*big.Int) (*NRC7FullApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullApprovalIterator{contract: _NRC7Full.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *NRC7FullApproval, owner []common.Address, approved []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var approvedRule []interface{}
	for _, approvedItem := range approved {
		approvedRule = append(approvedRule, approvedItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "Approval", ownerRule, approvedRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullApproval)
				if err := _NRC7Full.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) ParseApproval(log types.Log) (*NRC7FullApproval, error) {
	event := new(NRC7FullApproval)
	if err := _NRC7Full.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullApprovalForAllIterator is returned from FilterApprovalForAll and is used to iterate over the raw logs and unpacked data for ApprovalForAll events raised by the NRC7Full contract.
type NRC7FullApprovalForAllIterator struct {
	Event *NRC7FullApprovalForAll // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullApprovalForAllIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullApprovalForAll)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullApprovalForAll)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullApprovalForAllIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullApprovalForAllIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullApprovalForAll represents a ApprovalForAll event raised by the NRC7Full contract.
type NRC7FullApprovalForAll struct {
	Owner    common.Address
	Operator common.Address
	Approved bool
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterApprovalForAll is a free log retrieval operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NRC7Full *NRC7FullFilterer) FilterApprovalForAll(opts *bind.FilterOpts, owner []common.Address, operator []common.Address) (*NRC7FullApprovalForAllIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullApprovalForAllIterator{contract: _NRC7Full.contract, event: "ApprovalForAll", logs: logs, sub: sub}, nil
}

// WatchApprovalForAll is a free log subscription operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NRC7Full *NRC7FullFilterer) WatchApprovalForAll(opts *bind.WatchOpts, sink chan<- *NRC7FullApprovalForAll, owner []common.Address, operator []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var operatorRule []interface{}
	for _, operatorItem := range operator {
		operatorRule = append(operatorRule, operatorItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "ApprovalForAll", ownerRule, operatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullApprovalForAll)
				if err := _NRC7Full.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApprovalForAll is a log parse operation binding the contract event 0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31.
//
// Solidity: event ApprovalForAll(address indexed owner, address indexed operator, bool approved)
func (_NRC7Full *NRC7FullFilterer) ParseApprovalForAll(log types.Log) (*NRC7FullApprovalForAll, error) {
	event := new(NRC7FullApprovalForAll)
	if err := _NRC7Full.contract.UnpackLog(event, "ApprovalForAll", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the NRC7Full contract.
type NRC7FullPausedIterator struct {
	Event *NRC7FullPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullPaused represents a Paused event raised by the NRC7Full contract.
type NRC7FullPaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NRC7Full *NRC7FullFilterer) FilterPaused(opts *bind.FilterOpts) (*NRC7FullPausedIterator, error) {

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return &NRC7FullPausedIterator{contract: _NRC7Full.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NRC7Full *NRC7FullFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *NRC7FullPaused) (event.Subscription, error) {

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "Paused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullPaused)
				if err := _NRC7Full.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0x62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258.
//
// Solidity: event Paused(address account)
func (_NRC7Full *NRC7FullFilterer) ParsePaused(log types.Log) (*NRC7FullPaused, error) {
	event := new(NRC7FullPaused)
	if err := _NRC7Full.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullRoleAdminChangedIterator is returned from FilterRoleAdminChanged and is used to iterate over the raw logs and unpacked data for RoleAdminChanged events raised by the NRC7Full contract.
type NRC7FullRoleAdminChangedIterator struct {
	Event *NRC7FullRoleAdminChanged // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullRoleAdminChangedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullRoleAdminChanged)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullRoleAdminChanged)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullRoleAdminChangedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullRoleAdminChangedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullRoleAdminChanged represents a RoleAdminChanged event raised by the NRC7Full contract.
type NRC7FullRoleAdminChanged struct {
	Role              [32]byte
	PreviousAdminRole [32]byte
	NewAdminRole      [32]byte
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterRoleAdminChanged is a free log retrieval operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_NRC7Full *NRC7FullFilterer) FilterRoleAdminChanged(opts *bind.FilterOpts, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (*NRC7FullRoleAdminChangedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullRoleAdminChangedIterator{contract: _NRC7Full.contract, event: "RoleAdminChanged", logs: logs, sub: sub}, nil
}

// WatchRoleAdminChanged is a free log subscription operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_NRC7Full *NRC7FullFilterer) WatchRoleAdminChanged(opts *bind.WatchOpts, sink chan<- *NRC7FullRoleAdminChanged, role [][32]byte, previousAdminRole [][32]byte, newAdminRole [][32]byte) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var previousAdminRoleRule []interface{}
	for _, previousAdminRoleItem := range previousAdminRole {
		previousAdminRoleRule = append(previousAdminRoleRule, previousAdminRoleItem)
	}
	var newAdminRoleRule []interface{}
	for _, newAdminRoleItem := range newAdminRole {
		newAdminRoleRule = append(newAdminRoleRule, newAdminRoleItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "RoleAdminChanged", roleRule, previousAdminRoleRule, newAdminRoleRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullRoleAdminChanged)
				if err := _NRC7Full.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleAdminChanged is a log parse operation binding the contract event 0xbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff.
//
// Solidity: event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole)
func (_NRC7Full *NRC7FullFilterer) ParseRoleAdminChanged(log types.Log) (*NRC7FullRoleAdminChanged, error) {
	event := new(NRC7FullRoleAdminChanged)
	if err := _NRC7Full.contract.UnpackLog(event, "RoleAdminChanged", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullRoleGrantedIterator is returned from FilterRoleGranted and is used to iterate over the raw logs and unpacked data for RoleGranted events raised by the NRC7Full contract.
type NRC7FullRoleGrantedIterator struct {
	Event *NRC7FullRoleGranted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullRoleGrantedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullRoleGranted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullRoleGranted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullRoleGrantedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullRoleGrantedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullRoleGranted represents a RoleGranted event raised by the NRC7Full contract.
type NRC7FullRoleGranted struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleGranted is a free log retrieval operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) FilterRoleGranted(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NRC7FullRoleGrantedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullRoleGrantedIterator{contract: _NRC7Full.contract, event: "RoleGranted", logs: logs, sub: sub}, nil
}

// WatchRoleGranted is a free log subscription operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) WatchRoleGranted(opts *bind.WatchOpts, sink chan<- *NRC7FullRoleGranted, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "RoleGranted", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullRoleGranted)
				if err := _NRC7Full.contract.UnpackLog(event, "RoleGranted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleGranted is a log parse operation binding the contract event 0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d.
//
// Solidity: event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) ParseRoleGranted(log types.Log) (*NRC7FullRoleGranted, error) {
	event := new(NRC7FullRoleGranted)
	if err := _NRC7Full.contract.UnpackLog(event, "RoleGranted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullRoleRevokedIterator is returned from FilterRoleRevoked and is used to iterate over the raw logs and unpacked data for RoleRevoked events raised by the NRC7Full contract.
type NRC7FullRoleRevokedIterator struct {
	Event *NRC7FullRoleRevoked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullRoleRevokedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullRoleRevoked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullRoleRevoked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullRoleRevokedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullRoleRevokedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullRoleRevoked represents a RoleRevoked event raised by the NRC7Full contract.
type NRC7FullRoleRevoked struct {
	Role    [32]byte
	Account common.Address
	Sender  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterRoleRevoked is a free log retrieval operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) FilterRoleRevoked(opts *bind.FilterOpts, role [][32]byte, account []common.Address, sender []common.Address) (*NRC7FullRoleRevokedIterator, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullRoleRevokedIterator{contract: _NRC7Full.contract, event: "RoleRevoked", logs: logs, sub: sub}, nil
}

// WatchRoleRevoked is a free log subscription operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) WatchRoleRevoked(opts *bind.WatchOpts, sink chan<- *NRC7FullRoleRevoked, role [][32]byte, account []common.Address, sender []common.Address) (event.Subscription, error) {

	var roleRule []interface{}
	for _, roleItem := range role {
		roleRule = append(roleRule, roleItem)
	}
	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}
	var senderRule []interface{}
	for _, senderItem := range sender {
		senderRule = append(senderRule, senderItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "RoleRevoked", roleRule, accountRule, senderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullRoleRevoked)
				if err := _NRC7Full.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseRoleRevoked is a log parse operation binding the contract event 0xf6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b.
//
// Solidity: event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender)
func (_NRC7Full *NRC7FullFilterer) ParseRoleRevoked(log types.Log) (*NRC7FullRoleRevoked, error) {
	event := new(NRC7FullRoleRevoked)
	if err := _NRC7Full.contract.UnpackLog(event, "RoleRevoked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the NRC7Full contract.
type NRC7FullTransferIterator struct {
	Event *NRC7FullTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullTransfer represents a Transfer event raised by the NRC7Full contract.
type NRC7FullTransfer struct {
	From    common.Address
	To      common.Address
	TokenId *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address, tokenId []*big.Int) (*NRC7FullTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return &NRC7FullTransferIterator{contract: _NRC7Full.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *NRC7FullTransfer, from []common.Address, to []common.Address, tokenId []*big.Int) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "Transfer", fromRule, toRule, tokenIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullTransfer)
				if err := _NRC7Full.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 indexed tokenId)
func (_NRC7Full *NRC7FullFilterer) ParseTransfer(log types.Log) (*NRC7FullTransfer, error) {
	event := new(NRC7FullTransfer)
	if err := _NRC7Full.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// NRC7FullUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the NRC7Full contract.
type NRC7FullUnpausedIterator struct {
	Event *NRC7FullUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *NRC7FullUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(NRC7FullUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(NRC7FullUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *NRC7FullUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *NRC7FullUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// NRC7FullUnpaused represents a Unpaused event raised by the NRC7Full contract.
type NRC7FullUnpaused struct {
	Account common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NRC7Full *NRC7FullFilterer) FilterUnpaused(opts *bind.FilterOpts) (*NRC7FullUnpausedIterator, error) {

	logs, sub, err := _NRC7Full.contract.FilterLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return &NRC7FullUnpausedIterator{contract: _NRC7Full.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NRC7Full *NRC7FullFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *NRC7FullUnpaused) (event.Subscription, error) {

	logs, sub, err := _NRC7Full.contract.WatchLogs(opts, "Unpaused")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(NRC7FullUnpaused)
				if err := _NRC7Full.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa.
//
// Solidity: event Unpaused(address account)
func (_NRC7Full *NRC7FullFilterer) ParseUnpaused(log types.Log) (*NRC7FullUnpaused, error) {
	event := new(NRC7FullUnpaused)
	if err := _NRC7Full.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
